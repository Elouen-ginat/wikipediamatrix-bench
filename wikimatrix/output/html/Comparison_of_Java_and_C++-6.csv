"C++ Templates","Java Generics"
"Classes, functions, aliases[17] and variables[18] can be templated.","Classes and methods can be genericized."
"Parameters can be variadic, of any type, integral value, character literal, or a class template.","Parameters can be any reference type, including boxed primitive types (i.e. Integer, Boolean...)."
"Separate instantiations of the class or function will be generated for each parameter-set when compiled. For class templates, only the member functions that are used will be instantiated.","One version of the class or function is compiled, works for all type parameters (via type-erasure)."
"Objects of a class template instantiated with different parameters will have different types at run time (i.e., distinct template instantiations are distinct classes).","Type parameters are erased when compiled; objects of a class with different type parameters are the same type at run time. It causes a different constructor. Because of this type erasure, it is not possible to overload methods using different instantiations of the generic class."
"C++11 , URL: /wiki/C%2B%2B11
extern templates , URL: /wiki/C%2B%2B11#Extern_template
","Signature of the class or function from a compiled class file is sufficient to use it."
"specialized , URL: /wiki/Template_(programming)#Explicit_template_specialization
","Generics cannot be specialized."
"default arguments , URL: /wiki/Default_argument
C++11 , URL: /wiki/C%2B%2B11
","Generic type parameters cannot have default arguments."
"typedefs , URL: /wiki/Typedef
C++11 , URL: /wiki/C%2B%2B11
","Wildcards supported as type parameter."
"No direct support for bounding of type parameters, but metaprogramming provides this[19]","Supports bounding of type parameters with "extends" and "super" for upper and lower bounds, respectively; allows enforcement of relationships between type parameters."
"Allows instantiation of an object with the type of the parameter type.","Precludes instantiation of an object with the type of the parameter type (except via reflection)."
"Type parameter of class template can be used for static methods and variables.","Type parameter of generic class cannot be used for static methods and variables."
"Static variables , URL: /wiki/Static_variable
","Static variables shared between instances of classes of different type parameters."
"C++11 , URL: /wiki/C%2B%2B11
Concepts , URL: /wiki/Concepts_(C%2B%2B)
","Generic classes and functions can enforce type relationships for type parameters in their declaration. Use of an incorrect type parameter results in a type error within the code that uses it. Operations on parametrized types in generic code are only allowed in ways that can be guaranteed to be safe by the declaration. This results in greater type safety at the cost of flexibility."
"Turing-complete , URL: /wiki/Turing-complete
template metaprogramming , URL: /wiki/Template_metaprogramming
","Generics are also Turing-complete[20]"
