"Format","Languages"
"string1 OP string2, where OP can be any of =, <>, <, >, <= and >=","Pascal , URL: /wiki/Pascal_(programming_language)
Object Pascal , URL: /wiki/Object_Pascal
Delphi , URL: /wiki/Delphi_(programming_language)
OCaml , URL: /wiki/OCaml
Seed7 , URL: /wiki/Seed7
Standard ML , URL: /wiki/Standard_ML
BASIC , URL: /wiki/BASIC
VB , URL: /wiki/Visual_Basic_(classic)
VB .NET , URL: /wiki/Visual_Basic_.NET
F# , URL: /wiki/F_Sharp_(programming_language)
"
"string1 OP string2, where OP can be any of =, /=, ≠, <, >, <=, ≤ and ≥; Also: EQ, NE, LT, LE, GE and GT","ALGOL 68 , URL: /wiki/ALGOL_68
"
"(stringOP? string1 string2), where OP can be any of =, -ci=, <, -ci<, >, -ci>, <=, -ci<=, >= and -ci>= (operators starting with '-ci' are case-insensitive)","Scheme , URL: /wiki/Scheme_(programming_language)
"
"(stringOP string1 string2), where OP can be any of =, -ci=, <>, -ci<>, <, -ci<, >, -ci>, <=, -ci<=, >= and -ci>= (operators starting with '-ci' are case-insensitive)","Scheme , URL: /wiki/Scheme_(programming_language)
"
"(stringOP string1 string2), where OP can be any of =, -equal, /=, -not-equal, <, -lessp, >, -greaterp, <=, -not-greaterp, >= and -not-lessp (the verbal operators are case-insensitive)","Common Lisp , URL: /wiki/Common_Lisp
"
"(stringOP string1 string2), where OP can be any of =, /=, <, >, <=, and >=","ISLISP , URL: /wiki/ISLISP
"
"string1 OP string2, where OP can be any of =, \=, <, >, <= and >=","Rexx , URL: /wiki/Rexx
"
"string1 OP string2, where OP can be any of =, ¬=, <, >, <=, >=, ¬< and ¬>","PL/I , URL: /wiki/PL/I
"
"string1 OP string2, where OP can be any of =, /=, <, >, <= and >=","Ada , URL: /wiki/Ada_(programming_language)
"
"string1 OP string2, where OP can be any of ==, /=, <, >, =< and >=","Erlang , URL: /wiki/Erlang_(programming_language)
"
"string1 OP string2, where OP can be any of ==, /=, <, >, <= and >=","Haskell , URL: /wiki/Haskell_(programming_language)
"
"string1 OP string2, where OP can be any of eq, ne, lt, gt, le and ge","Perl , URL: /wiki/Perl
Raku , URL: /wiki/Raku_(programming_language)
"
"string1 OP string2, where OP can be any of ==, !=, <, >, <= and >=","C++ , URL: /wiki/C%2B%2B
C# , URL: /wiki/C_Sharp_(programming_language)
D , URL: /wiki/D_(programming_language)
Go , URL: /wiki/Go_(programming_language)
JavaScript , URL: /wiki/JavaScript
Python , URL: /wiki/Python_(programming_language)
PHP , URL: /wiki/PHP
Ruby , URL: /wiki/Ruby_(programming_language)
Rust , URL: /wiki/Rust_(programming_language)
Swift , URL: /wiki/Swift_(programming_language)
"
"string1 OP string2, where OP can be any of -eq, -ceq, -ne, -cne, -lt, -clt, -gt, -cgt, -le, -cle, -ge, and -cge (operators starting with 'c' are case-sensitive)","Windows PowerShell , URL: /wiki/Windows_PowerShell
"
"string1 OP string2, where OP can be any of ==, ~=, <, >, <= and >=","Lua , URL: /wiki/Lua_(programming_language)
"
"string1 OP string2, where OP can be any of =, ~=, <, >, <= and >=","Smalltalk , URL: /wiki/Smalltalk
"
"string1 OP string2, where OP can be any of ==, /=, <, >, <= and >=; Also: .EQ., .NE., .LT., .LE., .GT. and .GE.","Fortran , URL: /wiki/Fortran
"
"string1 OP string2 where OP can be any of =, <>, <, >, <=, >= as well as worded equivalents","COBOL , URL: /wiki/COBOL
"
"string1 OP string2 where OP can be any of ==, <>, <, >, <= and >=","Cobra , URL: /wiki/Cobra_(programming_language)
"
"string1 OP string2 is available in the syntax, but means comparison of the pointers pointing to the strings, not of the string contents. Use the Compare (integer result) function.","C , URL: /wiki/C_(programming_language)
Java , URL: /wiki/Java_(programming_language)
"
"string1.METHOD(string2) where METHOD is any of eq, ne, gt, lt, ge, le","Rust , URL: /wiki/Rust_(programming_language)
"
